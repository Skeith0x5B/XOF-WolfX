#version 120

struct BaseLight {
	vec3  color;
	float ambientIntensity;
	float diffuseIntensity;
};

struct DirectionalLight {
	BaseLight base;
	vec3 	  direction;
};


// Both CPU and GPU have access to uniform variables
uniform sampler2D diffuseMap;
uniform DirectionalLight directionalLight;
// Added for specular light
uniform vec3 eyeWorldPos;
uniform float matSpecularIntensity;
uniform float specularPower;

// "varying" type variables can be shared between shaders
varying vec3 normal0;
varying vec2 texCoord0;
varying vec3 worldPos0;


vec4 CalcLight(BaseLight light, vec3 lightDirection, vec3 normal) {
	vec4 ambientColor = vec4(light.color, 1.0f) * light.ambientIntensity;
	float diffuseFactor = dot(normal, -lightDirection);

	vec4 diffuseColor = vec4(0, 0, 0, 0);
	vec4 specularColor = vec4(0, 0, 0, 0);

	if(diffuseFactor > 0) {
		diffuseColor = vec4(light.color, 1.0f) * light.diffuseIntensity * diffuseFactor;
		
		vec3 vertexToEye = normalize(eyeWorldPos - worldPos0);
		vec3 lightReflect = normalize(reflect(lightDirection, normal));
		float specularFactor = dot(vertexToEye, lightReflect);
		specularFactor = pow(specularFactor, specularPower);
		
		if(specularFactor > 0) {
			specularColor = vec4(light.color, 1.0f) * matSpecularIntensity * specularFactor;
		}
	}
	
	return ambientColor + diffuseColor + specularColor;
}

vec4 CalcDirectionalLight(vec3 normal) {
	return CalcLight(directionalLight.base, directionalLight.direction, normal);
}

void main() {
	vec4 light = CalcDirectionalLight(normalize(normal0));
	gl_FragColor = texture2D(diffuseMap, texCoord0) * light;
}