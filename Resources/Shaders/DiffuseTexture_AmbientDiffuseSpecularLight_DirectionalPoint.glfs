#version 120


const int MAX_POINT_LIGHT_COUNT = 1;


// Common properties shared by all light types
struct BaseLight {
	vec3 color;
	float ambientIntensity;
	float diffuseIntensity;
};

struct DirectionalLight {
	BaseLight base;
	vec3 direction;
};

// Point light specific
struct Attenuation {
	float constant;
	float linear;
	float exp;
};

struct PointLight {
	BaseLight base;
	vec3 position;
	Attenuation atten;
	float range;
};


// both CPU and GPU have access to uniform variables
uniform sampler2D diffuseMap;
uniform DirectionalLight directionalLight;
uniform PointLight pointLights[MAX_POINT_LIGHT_COUNT];
// added for specular light
uniform vec3 eyeWorldPos;
uniform float matSpecularIntensity;
uniform float specularPower;

// "varying" type variables can be shared between shaders
varying vec3 normal0;
varying vec2 texCoord0;
varying vec3 worldPos0;


vec4 CalcLight(BaseLight light, vec3 lightDirection, vec3 normal) {
	vec4 ambientColor = vec4(light.color, 1.0f) * light.ambientIntensity;
	float diffuseFactor = dot(normal, -lightDirection);

	vec4 diffuseColor = vec4(0, 0, 0, 0);
	vec4 specularColor = vec4(0, 0, 0, 0);

	if(diffuseFactor > 0) {
		diffuseColor = vec4(light.color, 1.0f) * light.diffuseIntensity * diffuseFactor;
		
		vec3 vertexToEye = normalize(eyeWorldPos - worldPos0);
		vec3 lightReflect = normalize(reflect(lightDirection, normal));
		float specularFactor = dot(vertexToEye, lightReflect);
		specularFactor = pow(specularFactor, specularPower);
		
		if(specularFactor > 0) {
			specularColor = vec4(light.color, 1.0f) * matSpecularIntensity * specularFactor;
		}
	}
	
	return ambientColor + diffuseColor + specularColor;
}

vec4 CalcDirectionalLight(vec3 normal) {
	return CalcLight(directionalLight.base, directionalLight.direction, normal);
}

vec4 CalcPointLight(PointLight pointLight, vec3 normal) {
	vec3 lightDirection = worldPos0 - pointLight.position;
	float distance = length(lightDirection);
	
	if(distance > pointLight.range) {
		return vec4(0, 0, 0, 0);
	}
	
	lightDirection = normalize(lightDirection);
	
	vec4 color = CalcLight(pointLight.base, lightDirection, normal);
	float attenuation = pointLight.atten.constant + 
						pointLight.atten.linear * distance +
						pointLight.atten.exp * (distance * distance) +
						0.0001; // Add a small value to avoid division by zero
	
	// As attenuation grows the light should fall off/fade
	return color / attenuation;
} 

void main() {
	vec3 normal = normalize(normal0);
	vec4 totalLight = CalcDirectionalLight(normal);
	
	// GLSL doesn't handle variable length for-loops very well
	// harms performance more times than not
	for(int i=0; i<MAX_POINT_LIGHT_COUNT; ++i) {
		totalLight += CalcPointLight(pointLights[i], normal);
	}
	
	gl_FragColor = texture2D(diffuseMap, texCoord0) * totalLight;
}