#version 330

struct DirectionalLight {
	vec3 direction;
	vec3 color;
	float ambientIntensity;
	float diffuseIntensity;
};

// both CPU and GPU have access to uniform variables
uniform sampler2D diffuseMap;
uniform sampler2D normalMap;
uniform DirectionalLight directionalLight;
// added for specular light
uniform vec3 eyeWorldPos;
uniform float matSpecularIntensity;
uniform float specularPower;

// "varying" type variables can be shared between shaders
varying vec3 normal0;
varying vec2 texCoord0;
varying vec3 worldPos0;
varying vec3 tangent0;

vec3 CalculateBumpedNormal() {
    vec3 Normal = normalize(normal0);
    vec3 Tangent = normalize(tangent0);
    Tangent = normalize(Tangent - dot(Tangent, Normal) * Normal);
    vec3 Bitangent = cross(Tangent, Normal);
    vec3 BumpMapNormal = texture2D(normalMap, texCoord0).xyz;
    BumpMapNormal = 2.0 * BumpMapNormal - vec3(1.0, 1.0, 1.0);
    vec3 NewNormal;
    mat3 TBN = mat3(Tangent, Bitangent, Normal);
    NewNormal = TBN * BumpMapNormal;
    NewNormal = normalize(NewNormal);
    return NewNormal;
}

void main() {
	vec4 ambientColor = vec4(directionalLight.color, 1.0f) * directionalLight.ambientIntensity;
	vec3 lightDirection = -directionalLight.direction;
	vec3 normal = CalculateBumpedNormal();
	//vec3 normal = normalize(normal0);
		
	float diffuseFactor = dot(normal, lightDirection);
	
	vec4 diffuseColor = vec4(0, 0, 0, 0);
	vec4 specularColor = vec4(0, 0, 0, 0);
	if(diffuseFactor > 0) {
		diffuseColor = vec4(directionalLight.color, 1.0f) * directionalLight.diffuseIntensity * diffuseFactor;
		
		vec3 vertexToEye = normalize(eyeWorldPos - worldPos0);
		vec3 lightReflect = normalize(reflect(directionalLight.direction, normal));
		float specularFactor = dot(vertexToEye, lightReflect);
		specularFactor = pow(specularFactor, specularPower);
		
		if(specularFactor > 0) {
			specularColor = vec4(directionalLight.color, 1.0f) * matSpecularIntensity * specularFactor;
		}
	}
	
	gl_FragColor = texture2D(diffuseMap, texCoord0) * (ambientColor + diffuseColor + specularColor);
}